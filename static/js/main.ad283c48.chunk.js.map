{"version":3,"sources":["App.tsx","services/operationsService.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","getAvailableOperations","availableOperations","selectedOperations","setSelectedOperations","operandMin","setOperandMin","operandMax","setOperandMax","isRunning","setIsRunning","userAnswer","setUserAnswer","userAnswerComponent","setUserAnswerComponent","question","setQuestion","getRandomSelectedOperationQuestion","operationIndex","Math","floor","random","length","operation","operand1","operand2","generateQuestionText","onStart","focus","onStop","onEnter","correctAnswer","eval","alert","undefined","style","width","className","dataSource","displayExpr","key","value","onValueChanged","event","type","disabled","onClick","visible","onInitialized","params","component","placeholder","onEnterKey","valueChangeEvent","name","minNumberOfOperands","operands","join","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ad283c48.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport 'devextreme/dist/css/dx.common.css';\nimport 'devextreme/dist/css/dx.material.blue.dark.css';\nimport './App.css';\nimport {TagBox} from 'devextreme-react/tag-box';\nimport {Button} from 'devextreme-react/button';\nimport {NumberBox} from 'devextreme-react/number-box';\nimport {TextBox} from 'devextreme-react/text-box';\n\nimport {Operation, getAvailableOperations} from './services/operationsService';\nimport DevExpress from 'devextreme';\n\n\n\nconst App: React.FC = () => {\n  const [availableOperations] = useState<Array<Operation>>(getAvailableOperations());\n  const [selectedOperations, setSelectedOperations] = useState<Array<Operation>>([]);\n  const [operandMin, setOperandMin] = useState(0);\n  const [operandMax, setOperandMax] = useState(20);\n  const [isRunning, setIsRunning] = useState(false);\n  const [userAnswer, setUserAnswer] = useState<number | undefined>();\n  const [userAnswerComponent, setUserAnswerComponent] = useState<DevExpress.ui.dxNumberBox | undefined>();\n  const [question, setQuestion] = useState('x+1');\n\n  function getRandomSelectedOperationQuestion() {\n    const operationIndex = Math.floor(Math.random() * selectedOperations.length);\n\n    const operation = selectedOperations[operationIndex];\n    const operand1 = Math.floor(Math.random()*(operandMax-operandMin))+operandMin;\n    const operand2 = Math.floor(Math.random()*(operandMax-operandMin))+operandMin;\n    \n    return operation.generateQuestionText([operand1, operand2]);\n  }\n\n  function onStart() {\n    setQuestion(getRandomSelectedOperationQuestion());\n    setIsRunning(true);\n    if(userAnswerComponent) {\n      userAnswerComponent.focus();\n    }\n  }\n\n  function onStop() {\n\n    setIsRunning(false);\n  }\n\n  function onEnter() {\n    let correctAnswer:number = eval(question);\n    if(correctAnswer !== userAnswer) {\n      alert('wrong!');\n    }\n    else {\n      setQuestion(getRandomSelectedOperationQuestion());\n      setUserAnswer(undefined);\n    }\n\n  }\n\n  return (\n    <>\n      <div style={{width: '50%'}} className=\"dx-field\">\n        <label className=\"dx-field-label\">Operations to practice</label>\n        <TagBox className=\"dx-field-value\" dataSource={availableOperations}\n        displayExpr=\"name\"\n        key=\"name\" \n        value={selectedOperations}\n        onValueChanged={event => setSelectedOperations(event.value)} />\n      </div>\n      <div style={{width: '50%'}} className=\"dx-field\">\n        <label className=\"dx-field-label\">Min Operand</label>\n        <NumberBox className=\"dx-field-value\" \n        value={operandMin}\n        onValueChanged={event => setOperandMin(event.value)} />\n      </div>\n      <div style={{width: '50%'}} className=\"dx-field\">\n        <label className=\"dx-field-label\">Max Operand</label>\n        <NumberBox className=\"dx-field-value\" \n        value={operandMax}\n        onValueChanged={event => setOperandMax(event.value)} />\n      </div>\n      <Button type=\"default\" disabled={isRunning || selectedOperations.length == 0} onClick={event => onStart()}>Start</Button>\n      <Button type=\"danger\" disabled={!isRunning} onClick={event => onStop()}>Stop</Button>\n      <TextBox visible={isRunning} disabled={true} value={`What is: ${question}?`}></TextBox>\n      <NumberBox onInitialized={params => setUserAnswerComponent(params.component)} placeholder=\"User Answer\" onEnterKey={event => onEnter()} value={userAnswer} valueChangeEvent=\"keyup\" onValueChanged={event => setUserAnswer(event.value)} visible={isRunning}></NumberBox>\n    </>\n  );\n}\n\nexport default App;\n","import { string } from \"prop-types\"\r\n\r\nexport interface Operation {\r\n    name: string;\r\n    minNumberOfOperands: number;\r\n    generateQuestionText(operands: number[]): string;\r\n}\r\n\r\nexport function getAvailableOperations() : Array<Operation> {\r\n    return [\r\n        {\r\n            name: 'Addition',\r\n            minNumberOfOperands: 2,\r\n            generateQuestionText(operands) {\r\n                return operands.join('+');\r\n            }\r\n        },\r\n        {\r\n            name: 'Subtraction',\r\n            minNumberOfOperands: 2,\r\n            generateQuestionText(operands) {\r\n                return operands.join('-');\r\n            }\r\n        },\r\n        {\r\n            name: 'Multiplication',\r\n            minNumberOfOperands: 2,\r\n            generateQuestionText(operands) {\r\n                return operands.join('*');\r\n            }\r\n        }\r\n    ];\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}